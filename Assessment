provider "aws" {
  region = "your_aws_region"
}

# Define variables
variable "ecs_cluster_name" {
  default = "your_ecs_cluster_name"
}

variable "ecs_instance_type" {
  default = "t2.micro"  # Change the instance type as needed
}

variable "redis_port" {
  default = 6379
}

# Create a VPC for ECS
resource "aws_vpc" "ecs_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true

  tags = {
    Name = "ecs-vpc"
  }
}

# Create a subnet for ECS instances
resource "aws_subnet" "ecs_subnet" {
  vpc_id                  = aws_vpc.ecs_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "your_az"  # Specify the availability zone
  map_public_ip_on_launch = true

  tags = {
    Name = "ecs-subnet"
  }
}

# Create an ECS cluster
resource "aws_ecs_cluster" "ecs_cluster" {
  name = var.ecs_cluster_name
}

# IAM role for ECS instances
resource "aws_iam_role" "ecs_instance_role" {
  name = "ecs-instance-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      }
    }
  ]
}
EOF
}

# Attach the AmazonEC2ContainerServiceforEC2Role policy to the IAM role
resource "aws_iam_role_policy_attachment" "ecs_instance_policy_attachment" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
  role       = aws_iam_role.ecs_instance_role.name
}

# Launch Configuration for ECS instances
resource "aws_launch_configuration" "ecs_launch_config" {
  name = "ecs-launch-config"

  image_id = "your_ami_id"  # Specify the AMI ID for your ECS instances

  instance_type = var.ecs_instance_type

  iam_instance_profile = aws_iam_instance_profile.ecs_instance_profile.name

  key_name = "your_key_pair"  # Specify your SSH key pair name

  user_data = <<-EOF
              #!/bin/bash
              echo ECS_CLUSTER=${aws_ecs_cluster.ecs_cluster.name} >> /etc/ecs/ecs.config
            EOF

  security_groups = [aws_security_group.ecs_sg.id]
}

# Security group for ECS instances
resource "aws_security_group" "ecs_sg" {
  vpc_id = aws_vpc.ecs_vpc.id

  // Define inbound and outbound rules as needed for ECS instances
}

# IAM instance profile for ECS instances
resource "aws_iam_instance_profile" "ecs_instance_profile" {
  name = "ecs-instance-profile"

  role = aws_iam_role.ecs_instance_role.name
}

# Auto Scaling Group for ECS instances
resource "aws_autoscaling_group" "ecs_asg" {
  desired_capacity     = 1
  max_size             = 1
  min_size             = 1
  vpc_zone_identifier = [aws_subnet.ecs_subnet.id]
  launch_configuration = aws_launch_configuration.ecs_launch_config.id

  tag {
    key                 = "Name"
    value               = "ecs-instance"
    propagate_at_launch = true
  }
}

# Redis ElastiCache cluster
resource "aws_elasticache_cluster" "redis_cluster" {
  cluster_id           = "redis-cluster"
  engine               = "redis"
  node_type            = "cache.t2.micro"  # Change as needed
  num_cache_nodes      = 1
  parameter_group_name = "default.redis5.0"

  subnet_group_name = aws_elasticache_subnet_group.redis_subnet_group.name
}

# ElastiCache subnet group
resource "aws_elasticache_subnet_group" "redis_subnet_group" {
  name       = "redis-subnet-group"
  subnet_ids = [aws_subnet.ecs_subnet.id]
}

# Output the Redis endpoint
output "redis_endpoint" {
  value = aws_elasticache_cluster.redis_cluster.cache_nodes[0].address
}
